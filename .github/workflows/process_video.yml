# .github/workflows/process-video.yml - v2.1 (包含 PYTHONPATH 修正)

name: Process Video from Notion Trigger

on:
  # 允許 n8n/Make.com 透過 API 觸發
  repository_dispatch:
    types: [process_notion_task]
    
  # 允許手動在 GitHub 介面觸發，方便測試
  workflow_dispatch:
    inputs:
      notion_page_id:
        description: '要處理的 Notion Page ID'
        required: true
      original_link:
        description: '影片 URL'
        required: true
      task_name:
        description: '任務名稱'
        required: true
        default: '手動測試任務'
      person_in_charge:
        description: '負責人'
        required: false
        default: '手動測試員'
      videographer:
        description: '攝影師'
        required: false
        default: '手動測試員'

jobs:
  process-video:
    runs-on: ubuntu-latest
    
    steps:
    # 步驟 1: 拉取程式碼
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # 步驟 2: 設定 Python 環境
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # 步驟 3: 安裝系統依賴
    - name: Install system dependencies (ffmpeg & yt-dlp)
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        sudo wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O /usr/local/bin/yt-dlp
        sudo chmod a+rx /usr/local/bin/yt-dlp
        
    # 步驟 4: 快取並安裝 Python 依賴
    - name: Cache and Install Python dependencies
      uses: actions/cache@v4
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # 步驟 5: 執行核心 Python 腳本 (最關鍵的步驟)
    - name: Run Python Processor
      id: run-processor
      timeout-minutes: 15
      env:
        # ✅ 關鍵修正：告訴 Python 也要在根目錄尋找模組
        PYTHONPATH: .

        # --- API Keys & Config (從 GitHub Secrets 讀取) ---
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
        # --- R2 Storage (從 GitHub Secrets 讀取) ---
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_BUCKET: ${{ secrets.R2_BUCKET_NAME }}
        R2_CUSTOM_DOMAIN: ${{ secrets.R2_PUBLIC_URL }}

        # --- Task Data (從 n8n 或手動觸發中讀取) ---
        NOTION_PAGE_ID: ${{ github.event.client_payload.notion_page_id || github.event.inputs.notion_page_id }}
        ORIGINAL_LINK: ${{ github.event.client_payload.original_link || github.event.inputs.original_link }}
        TASK_NAME: ${{ github.event.client_payload.task_name || github.event.inputs.task_name }}
        PERSON_IN_CHARGE: ${{ github.event.client_payload.person_in_charge || github.event.inputs.person_in_charge }}
        VIDEOGRAPHER: ${{ github.event.client_payload.videographer || github.event.inputs.videographer }}
        
      run: |
        echo "🏃‍♂️ Starting main.py..."
        python main.py
        echo "🏁 main.py finished."

    # 步驟 6: 上傳日誌（僅在失敗時，用於除錯）
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failure-logs-${{ github.run_id }}
        path: |
          *.log
        retention-days: 7